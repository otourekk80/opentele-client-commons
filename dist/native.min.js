!function(){"use strict";var nativeServices=angular.module("opentele-commons.nativeServices",[]);nativeServices.service("nativeService",["$window","$timeout",function($window,$timeout){var enableMessagesFromNative=function(){$window.sendMessageToWebView=function(rawMessage){console.log("message from native layer received: "+rawMessage);var message=JSON.parse(rawMessage),publishAndForceAngularDigestCycle=function(message){$timeout(function(){publishMessageFromNative(message)})};publishAndForceAngularDigestCycle(message)}},subscriptions={},addSubscription=function(messageType,callback,autoUnregister){subscriptions.hasOwnProperty(messageType)||(subscriptions[messageType]=[]),subscriptions[messageType].push({handleMessage:callback,autoUnregister:autoUnregister})},subscribeToSingleMessage=function(messageType,callback){addSubscription(messageType,callback,!0)},subscribeToMultipleMessages=function(messageType,callback){addSubscription(messageType,callback,!1)},unsubscribe=function(messageType,callback){if(subscriptions.hasOwnProperty(messageType)){var remainingSubscriptions=[];angular.forEach(subscriptions[messageType],function(subscription){subscription.handleMessage!==callback&&remainingSubscriptions.push(subscription)}),subscriptions[messageType]=remainingSubscriptions}},unsubscribeAll=function(messageType){subscriptions.hasOwnProperty(messageType)&&(subscriptions[messageType]=[])},publishMessageFromNative=function(message){subscriptions.hasOwnProperty(message.messageType)||console.log("No message handlers found to handle message from native layer: "+message.messageType);var handlers=subscriptions[message.messageType],handlersStillRegistered=[];angular.forEach(handlers,function(handler){console.log("invoking handler for messageType: "+message.messageType),handler.handleMessage(message),handler.autoUnregister===!1&&handlersStillRegistered.push(handler)}),subscriptions[message.messageType]=handlersStillRegistered},exists=function(identifier){return void 0!==identifier&&null!==identifier},nativeExists=function(){return exists($window.sendMessageToNative)},openUrl=function(url){if(!nativeExists())return void console.log("Url cannot be opened. No native layer");var request={messageType:"openUrlRequest",url:url};$window.sendMessageToNative(request)},getPatientPrivacyPolicy=function(callback){if(!nativeExists())return void console.log("No patient privacy policy information found");subscribeToSingleMessage("patientPrivacyPolicyResponse",callback);var request={messageType:"patientPrivacyPolicyRequest"};$window.sendMessageToNative(request)},getDeviceInformation=function(callback){if(!nativeExists())return void console.log("No device information found");subscribeToSingleMessage("deviceInformationResponse",callback);var request={messageType:"deviceInformationRequest"};$window.sendMessageToNative(request)},sendReminders=function(reminderList){if(!nativeExists())return void console.log("Could not send reminders");var request={messageType:"setupRemindersRequest",reminders:reminderList};$window.sendMessageToNative(request)},clearRemindersForQuestionnaire=function(questionnaireName){if(!nativeExists())return void console.log("Could not clear reminders for questionnaire");var request={messageType:"clearQuestionnaireReminderRequest",questionnaireName:questionnaireName};$window.sendMessageToNative(request)},getQuestionnairesToHighlight=function(callback){if(!nativeExists())return void console.log("Could not get list of questionnaires to highlight");subscribeToSingleMessage("overdueQuestionnairesResponse",callback);var request={messageType:"overdueQuestionnairesRequest"};$window.sendMessageToNative(request)},clientIsVideoEnabled=function(callback){if(!nativeExists())return void console.log("Video not enabled on client");subscribeToSingleMessage("videoEnabledResponse",callback);var request={messageType:"videoEnabledRequest"};$window.sendMessageToNative(request)},joinConference=function(conferenceDetails){if(!nativeExists())return void console.log("Could not join conference");var request={messageType:"startVideoConferenceRequest",conferenceDetails:conferenceDetails};$window.sendMessageToNative(request)},playNotificationSound=function(){if(!nativeExists())return void console.log("Could not play notification sound");var request={messageType:"startNotificationSoundRequest"};$window.sendMessageToNative(request)},stopNotificationSound=function(){if(!nativeExists())return void console.log("Could not stop notification sound");var request={messageType:"stopNotificationSoundRequest"};$window.sendMessageToNative(request)},addDeviceListener=function(measurementType){if(!nativeExists()){var error=new Error("Could not add device listener for "+measurementType);throw error.code=2,error}var request={messageType:"deviceMeasurementRequest",measurementType:measurementType};$window.sendMessageToNative(request)},removeDeviceListeners=function(){if(!nativeExists())return void console.log("Could not remove device listeners");var request={messageType:"stopDeviceMeasurementRequest"};$window.sendMessageToNative(request),unsubscribeAll("deviceMeasurementResponse")};return{enableMessagesFromNative:enableMessagesFromNative,subscribeToSingleMessage:subscribeToSingleMessage,subscribeToMultipleMessages:subscribeToMultipleMessages,unsubscribe:unsubscribe,unsubscribeAll:unsubscribeAll,publishMessageFromNative:publishMessageFromNative,getPatientPrivacyPolicy:getPatientPrivacyPolicy,getDeviceInformation:getDeviceInformation,openUrl:openUrl,sendReminders:sendReminders,clearRemindersForQuestionnaire:clearRemindersForQuestionnaire,getQuestionnairesToHighlight:getQuestionnairesToHighlight,clientIsVideoEnabled:clientIsVideoEnabled,joinConference:joinConference,playNotificationSound:playNotificationSound,stopNotificationSound:stopNotificationSound,addDeviceListener:addDeviceListener,removeDeviceListeners:removeDeviceListeners}}])}();
//# sourceMappingURL=native.min.js.map