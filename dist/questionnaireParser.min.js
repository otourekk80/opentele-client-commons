!function(){"use strict";var assignmentNodeParser=angular.module("opentele-commons.questionnaireParser.assignmentNodeParser",[]);assignmentNodeParser.service("assignmentNodeParser",["nodesParser",function(nodesParser){var parseAssignmentNode=function(node,nodeMap,outputModel){var variableName=node.variable.name;outputModel[variableName]={name:variableName,value:node.expression.value,type:node.variable.type};var nextNodeId=node.next;return nodesParser.parse(nextNodeId,nodeMap,outputModel)};return parseAssignmentNode}])}(),function(){"use strict";var bloodPressureDeviceNodeParser=angular.module("opentele-commons.questionnaireParser.bloodPressureDeviceNodeParser",["opentele-commons.deviceListeners"]),bloodPressureDeviceNodeParserService=["$templateCache","parserUtils","nativeService","bloodPressureListener",function($templateCache,parserUtils,nativeService,bloodPressureListener){var OMIT="Omit",NEXT="Next",BLOOD_PRESSURE="blood pressure",nodeTemplate=parserUtils.getNodeTemplate("bloodPressureDeviceNode.html"),validate=function(scope){var isValueEntered=function(){return void 0!==scope.nodeModel.systolic&&void 0!==scope.nodeModel.diastolic&&void 0!==scope.nodeModel.pulse};return isValueEntered()},generateRepresentation=function(node,nodeModel){var clickAction=function(scope){var pulseName=node.pulse.name,pulseType=node.pulse.type,pulseValue=scope.nodeModel.pulse;scope.outputModel[pulseName]={name:pulseName,type:pulseType,value:pulseValue};var systolicName=node.systolic.name,systolicType=node.systolic.type,systolicValue=scope.nodeModel.systolic;scope.outputModel[systolicName]={name:systolicName,type:systolicType,value:systolicValue};var diastolicName=node.diastolic.name,diastolicType=node.diastolic.type,diastolicValue=scope.nodeModel.diastolic;scope.outputModel[diastolicName]={name:diastolicName,type:diastolicType,value:diastolicValue};var meanArterialPressureName=node.meanArterialPressure.name,meanArterialPressureType=node.meanArterialPressure.type,meanArterialPressureValue=scope.nodeModel.meanArterialPressure;scope.outputModel[meanArterialPressureName]={name:meanArterialPressureName,type:meanArterialPressureType,value:meanArterialPressureValue};var deviceName=node.deviceId.name,deviceType=node.deviceId.type,deviceId=scope.nodeModel.deviceId;scope.outputModel[deviceName]={name:deviceName,type:deviceType,value:deviceId}},leftButton={text:OMIT,nextNodeId:node.nextFail},rightButton={text:NEXT,nextNodeId:node.next,validate:validate,clickAction:clickAction},representation={nodeTemplate:nodeTemplate,nodeModel:nodeModel,leftButton:leftButton,rightButton:rightButton};return representation},parseNode=function(node,nodeMap,outputModel){var nodeModel={heading:node.text,info:"BLOOD_PRESSURE_CONNECT"},eventListener=bloodPressureListener.create(nodeModel),nativeEventCallback=function(message){message.measurementType===BLOOD_PRESSURE&&eventListener(message.event)};nativeService.subscribeToMultipleMessages("deviceMeasurementResponse",nativeEventCallback),nativeService.addDeviceListener(BLOOD_PRESSURE);var representation=generateRepresentation(node,nodeModel);return representation};return parseNode}];bloodPressureDeviceNodeParser.service("bloodPressureDeviceNodeParser",bloodPressureDeviceNodeParserService)}(),function(){"use strict";var bloodSugarManualDeviceNodeParser=angular.module("opentele-commons.questionnaireParser.bloodSugarManualDeviceNodeParser",[]),bloodSugarService=["$templateCache","parserUtils",function($templateCache,parserUtils){var parseNode=function(node){var nodeModel={heading:node.text},leftButton={text:"Omit",nextNodeId:node.nextFail},rightButton={text:"Next",nextNodeId:node.next,validate:function(scope){return scope.bloodSugarForm.count.$valid},clickAction:function(scope){var nodeName=node.bloodSugarMeasurements.name,isBeforeMeal=scope.nodeModel.bloodSugarManualBeforeMeal,isAfterMeal=scope.nodeModel.bloodSugarManualAfterMeal,timestamp=(new Date).toISOString();scope.outputModel[nodeName]={name:nodeName,type:"BloodSugarMeasurements",value:{measurements:[{result:scope.nodeModel.bloodSugarManualMeasurement,isBeforeMeal:isBeforeMeal,isAfterMeal:isAfterMeal,timeOfMeasurement:timestamp}],transferTime:timestamp}}}},representation={nodeTemplate:parserUtils.getNodeTemplate("bloodSugarManualDeviceNode.html"),nodeModel:nodeModel,leftButton:leftButton,rightButton:rightButton};return representation};return parseNode}];bloodSugarManualDeviceNodeParser.service("bloodSugarManualDeviceNodeParser",bloodSugarService)}(),function(){"use strict";var crpNodeParser=angular.module("opentele-commons.questionnaireParser.crpNodeParser",[]);crpNodeParser.service("crpNodeParser",["$templateCache","parserUtils",function($templateCache,parserUtils){var parseNode=function(node){var nodeModel={heading:node.text},leftButton={text:"Omit",nextNodeId:node.nextFail},rightButton={text:"Next",nextNodeId:node.next,validate:function(scope){var isLt5CheckedAndNothingElse=function(){return scope.nodeModel.crpLt5Measurement===!0&&(void 0===scope.nodeModel.crpCountMeasurement||null===scope.nodeModel.crpCountMeasurement||0===scope.nodeModel.crpCountMeasurement.length)},isValueEnteredAndNothingElse=function(){return scope.nodeModel.crpLt5Measurement!==!0&&void 0!==scope.nodeModel.crpCountMeasurement&&null!==scope.nodeModel.crpCountMeasurement&&0<=scope.nodeModel.crpCountMeasurement&&0<scope.nodeModel.crpCountMeasurement.toString().length};return isLt5CheckedAndNothingElse()||isValueEnteredAndNothingElse()},clickAction:function(scope){var nodeName=node.CRP.name,lt5=scope.nodeModel.crpLt5Measurement,count=scope.nodeModel.crpCountMeasurement;scope.outputModel[nodeName]={name:nodeName,type:node.CRP.type,value:lt5||5>count?0:count}}},representation={nodeTemplate:parserUtils.getNodeTemplate("crpNode.html"),nodeModel:nodeModel,leftButton:leftButton,rightButton:rightButton};return representation};return parseNode=parseNode}])}(),function(){"use strict";var decisionNodeParser=angular.module("opentele-commons.questionnaireParser.decisionNodeParser",[]);decisionNodeParser.service("decisionNodeParser",["nodesParser",function(nodesParser){var getOperator=function(node){var operator;for(var op in node.expression){operator=op;break}if("lt"!==operator&&"gt"!==operator&&"eq"!==operator)throw new Error("Unsupported operator: "+operator);return operator},getValueAndType=function(side,outputModel){var valueAndType;if(valueAndType="name"===side.type?{value:outputModel[side.value].value,type:outputModel[side.value].type}:{value:side.value,type:side.type},["Integer","Float","Boolean"].indexOf(valueAndType.type)<0)throw new Error("Type not supported: "+valueAndType.type);return valueAndType},evaluate=function(operator,left,right){if(left.type!==right.type)throw new TypeError("Type for left and right side must be the same. Left: "+left.type+", right: "+right.type);switch(operator){case"lt":if("Boolean"===left.type)throw new TypeError("Boolean expression with operators other than eq not supported.");return left.value<right.value;case"gt":if("Boolean"===left.type)throw new TypeError("Boolean expression with operators other than eq not supported.");return left.value>right.value;case"eq":return left.value===right.value}},parseNode=function(node,nodeMap,outputModel){var operator=getOperator(node),left=getValueAndType(node.expression[operator].left,outputModel),right=getValueAndType(node.expression[operator].right,outputModel),isTrue=evaluate(operator,left,right),nextNodeId=isTrue===!0?node.next:node.nextFalse;return nodesParser.parse(nextNodeId,nodeMap,outputModel)};return parseNode}])}(),function(){"use strict";var delayNodeParser=angular.module("opentele-commons.questionnaireParser.delayNodeParser",[]);delayNodeParser.service("delayNodeParser",["$interval","parserUtils","nodesParser",function($interval,parserUtils,nodesParser){var parseNode=function(node,nodeMap){var onTimerStopped=function(scope){scope.nextNode(node.next,nodesParser,nodeMap)},nodeModel={nodeId:node.nodeName,heading:node.displayTextString,count:node.countUp===!0?0:node.countTime,countTime:node.countTime,countUp:node.countUp,onTimerStopped:onTimerStopped},representation={nodeTemplate:parserUtils.getNodeTemplate("delayNode.html"),nodeModel:nodeModel};return representation};return parseNode}])}(),function(){"use strict";var endNodeParser=angular.module("opentele-commons.questionnaireParser.endNodeParser",[]);endNodeParser.service("endNodeParser",function(){var parseNode=function(node){return{isEndNode:!0}};return parseNode})}(),function(){"use strict";var haemoglobinDeviceNodeParser=angular.module("opentele-commons.questionnaireParser.haemoglobinDeviceNodeParser",[]);haemoglobinDeviceNodeParser.service("haemoglobinDeviceNodeParser",["parserUtils",function(parserUtils){var parseNode=function(node){return parserUtils.parseSimpleInputNode(node,node.haemoglobinValue,"HAEMOGLOBIN")};return parseNode}])}(),function(){"use strict";var ioNodeParser=angular.module("opentele-commons.questionnaireParser.ioNodeParser",[]);ioNodeParser.service("ioNodeParser",["$templateCache","parserUtils",function($templateCache,parserUtils){var parseNode=function(node){for(var elementTemplates=[],labels=[],clickActions=[],validateActions=[],representation={nodeModel:{}},setupClickActions=function(skipValidation,buttonRepresentation){skipValidation!==!0&&(buttonRepresentation.clickAction=function(scope){for(var i=0;i<clickActions.length;i++)clickActions[i](scope)},buttonRepresentation.validate=function(scope){for(var i=0;i<clickActions.length;i++)if(validateActions[i](scope)===!1)return!1;return!0})},handleTextViewElement=function(element,representation,elementIndex,allElements){labels.push(element.text)},handleEditTextElement=function(element,representation){var template=parserUtils.getNodeTemplate("ioNodeEditText.html"),elementType="String"===element.outputVariable.type?"text":"number",editFieldName="input_"+elementType+"_"+parserUtils.hashCode(element.outputVariable.name),formName="form_"+editFieldName;template=parserUtils.replaceAll(template,"#type#","String"===element.outputVariable.type?"text":"number"),template=parserUtils.replaceAll(template,"#step#","Integer"===element.outputVariable.type?"1":"any"),template=parserUtils.replaceAll(template,"#form_name#",formName),template=parserUtils.replaceAll(template,"#input_name#",editFieldName);var labelText=labels.length>0?labels.pop():"";template=parserUtils.replaceAll(template,"#label#",labelText),elementTemplates.push(template),clickActions.push(function(scope){var variableName=element.outputVariable.name;scope.outputModel[variableName]={name:variableName,value:scope.nodeModel[editFieldName],type:element.outputVariable.type}}),validateActions.push(function(scope){return scope[formName][editFieldName].$valid})},handleTwoButtonElement=function(element,representation){var leftButton={text:element.leftText,nextNodeId:element.leftNext};setupClickActions(element.leftSkipValidation,leftButton),representation.leftButton=leftButton;var rightButton={text:element.rightText,nextNodeId:element.rightNext};setupClickActions(element.rightSkipValidation,rightButton),representation.rightButton=rightButton},handleButtonElement=function(element,representation){var buttonRepresentation={text:element.text,nextNodeId:element.next};switch(setupClickActions(element.skipValidation,buttonRepresentation),element.gravity){case"center":representation.centerButton=buttonRepresentation;break;case"right":representation.rightButton=buttonRepresentation;break;case"left":representation.leftButton=buttonRepresentation}},handleRadioButtonElement=function(element,representation){var setValueAccordingToType=function(value,type){switch(type){case"Float":return parseFloat(value);case"Integer":var radix=10;return parseInt(value,radix);case"String":return value;default:return console.log("Unknown type: "+type),value}},template=parserUtils.getNodeTemplate("ioNodeRadioButton.html"),radioButtonName="input_"+elementTemplates.length,formName="form_"+radioButtonName;representation.nodeModel.radioItems=element.choices.map(function(choice){return{label:choice.text,value:choice.value.value}}),template=parserUtils.replaceAll(template,"#form_name#",formName),elementTemplates.push(template),clickActions.push(function(scope){var variableName=element.outputVariable.name,value=setValueAccordingToType(scope.nodeModel.radioSelected,element.outputVariable.type);scope.outputModel[variableName]={name:variableName,value:value,type:element.outputVariable.type}}),validateActions.push(function(scope){return scope[formName].$dirty})},elementHandlers={TextViewElement:function(element,representation,elementIndex,allElements){handleTextViewElement(element,representation,elementIndex,allElements)},EditTextElement:function(element,representation){handleEditTextElement(element,representation)},ButtonElement:function(element,representation){handleButtonElement(element,representation)},TwoButtonElement:function(element,representation){handleTwoButtonElement(element,representation)},RadioButtonElement:function(element,representation){handleRadioButtonElement(element,representation)},HelpTextElement:function(){}},i=0;i<node.elements.length;i++){var element=node.elements[i],elementName=parserUtils.getNodeType(element),handler=elementHandlers[elementName];handler(element[elementName],representation,i,node.elements)}return elementTemplates.unshift(labels.map(function(label){var template=parserUtils.getNodeTemplate("ioNodeText.html");return parserUtils.replaceAll(template,"#heading#",label)})),representation.nodeTemplate=elementTemplates.join("\n"),representation};return parseNode}])}(),function(){"use strict";var lungMonitorDeviceNodeParser=angular.module("opentele-commons.questionnaireParser.lungMonitorDeviceNodeParser",["opentele-commons.deviceListeners"]),lungMonitorDeviceNodeParserService=["$templateCache","parserUtils","nativeService","lungFunctionListener",function($templateCache,parserUtils,nativeService,lungFunctionListener){var OMIT="Omit",NEXT="Next",LUNG_FUNCTION="lung function",nodeTemplate=parserUtils.getNodeTemplate("lungMonitorDeviceNode.html"),validate=function(scope){var isValueEntered=function(){return void 0!==scope.nodeModel.fev1&&void 0!==scope.nodeModel.fev6&&void 0!==scope.nodeModel.fev1Fev6Ratio&&void 0!==scope.nodeModel.goodTest&&void 0!==scope.nodeModel.softwareVersion};return isValueEntered()},generateRepresentation=function(node,nodeModel){var clickAction=function(scope){var measurements=["fev1","fev6","fev1Fev6Ratio","fef2575","goodTest","softwareVersion","deviceId"];measurements.forEach(function(measurement){var measurementName=node[measurement].name,measurementType=node[measurement].type,measurementValue=scope.nodeModel[measurement];scope.outputModel[measurementName]={name:measurementName,type:measurementType,value:measurementValue}})},leftButton={text:OMIT,nextNodeId:node.nextFail},rightButton={text:NEXT,nextNodeId:node.next,validate:validate,clickAction:clickAction},representation={nodeTemplate:nodeTemplate,nodeModel:nodeModel,leftButton:leftButton,rightButton:rightButton};return representation},parseNode=function(node,nodeMap,outputModel){var html5HookDescription={elementId:"deviceHook",modelName:"nodeModel",callbackName:"eventListener"},nodeModel={heading:node.text,info:"CONNECTING"},eventListener=lungFunctionListener.create(nodeModel);nodeModel.eventListener=eventListener,nativeService.addDeviceListener(LUNG_FUNCTION,html5HookDescription);var representation=generateRepresentation(node,nodeModel);return representation};return parseNode}];lungMonitorDeviceNodeParser.service("lungMonitorDeviceNodeParser",lungMonitorDeviceNodeParserService)}(),function(){"use strict";var parserUtils=angular.module("opentele-commons.questionnaireParser.utils",[]);parserUtils.service("parserUtils",["$templateCache",function($templateCache){var getFirstKeyFromLiteral=function(literal){for(var key in literal)if(literal.hasOwnProperty(key))return key},getNodeTemplate=function(templateName){var template=$templateCache.get("questionnaireParser/nodeTemplates/"+templateName);if("undefined"==typeof template)throw new Error("HTML template does not exist for "+templateName);return template},getNodeType=function(node){return getFirstKeyFromLiteral(node)},hashCode=function(str){var i,chr,len,hash=0;if(0===str.length)return hash;for(i=0,len=str.length;len>i;i++)chr=str.charCodeAt(i),hash=(hash<<5)-hash+chr,hash|=0;return Math.abs(hash)},replaceAll=function(str,find,replace){var escapeRegExp=function(str){return str.replace(/([.*+?^=!:${}()|\[\]\/\\])/g,"\\$1")};return str.replace(new RegExp(escapeRegExp(find),"g"),replace)},parseSimpleInputNode=function(node,nodeValueEntry,fieldName){var isIntegerNode="Integer"===nodeValueEntry.type,template=getNodeTemplate("simpleInputNode.html");template=replaceAll(template,"#field_name#",fieldName);var numberPattern=isIntegerNode===!0?/^\d+$/:/.+/;template=replaceAll(template,"#pattern#",numberPattern);var representation={nodeTemplate:template,nodeModel:{heading:node.text}};return representation.rightButton={text:"Next",nextNodeId:node.next,validate:function(scope){return scope.inputForm.value.$valid},clickAction:function(scope){var nodeName=nodeValueEntry.name;scope.outputModel[nodeName]={name:nodeName,type:nodeValueEntry.type,value:scope.nodeModel.measurement}}},representation.leftButton={text:"Omit",nextNodeId:node.nextFail},representation};return{getFirstKeyFromLiteral:getFirstKeyFromLiteral,getNodeTemplate:getNodeTemplate,getNodeType:getNodeType,hashCode:hashCode,parseSimpleInputNode:parseSimpleInputNode,replaceAll:replaceAll}}])}(),function(){"use strict";var questionnaireParser=angular.module("opentele-commons.questionnaireParser",["opentele-commons.questionnaireParser.templates","opentele-commons.questionnaireParser.utils","opentele-commons.questionnaireParser.haemoglobinDeviceNodeParser","opentele-commons.questionnaireParser.bloodSugarManualDeviceNodeParser","opentele-commons.questionnaireParser.crpNodeParser","opentele-commons.questionnaireParser.ioNodeParser","opentele-commons.questionnaireParser.assignmentNodeParser","opentele-commons.questionnaireParser.endNodeParser","opentele-commons.questionnaireParser.decisionNodeParser","opentele-commons.questionnaireParser.temperatureManualDeviceNodeParser","opentele-commons.questionnaireParser.urineDeviceNodeParser","opentele-commons.questionnaireParser.glucoseUrineDeviceNodeParser","opentele-commons.questionnaireParser.bloodUrineDeviceNodeParser","opentele-commons.questionnaireParser.nitriteUrineDeviceNodeParser","opentele-commons.questionnaireParser.leukocytesUrineDeviceNodeParser","opentele-commons.questionnaireParser.delayNodeParser","opentele-commons.questionnaireParser.weightDeviceNodeParser","opentele-commons.questionnaireParser.bloodPressureDeviceNodeParser","opentele-commons.questionnaireParser.saturationDeviceNodeParser","opentele-commons.questionnaireParser.saturationWithoutPulseDeviceNodeParser"]);questionnaireParser.service("nodesParser",["$injector","parserUtils",function($injector,parserUtils){var getParser=function(nodeType){var firstNonUpperCaseCharacter=function(str){for(var i=0;i<str.length;i++){var c=str[i];if(!(c>="A"&&"Z">=c))return i>1?i-1:i}return-1},idx=firstNonUpperCaseCharacter(nodeType),parserName=nodeType.slice(0,idx).toLowerCase()+nodeType.slice(idx)+"Parser";return $injector.get(parserName)},hasParser=function(nodeType){try{return getParser(nodeType),!0}catch(e){return!1}},parseNode=function(currentNodeId,nodeMap,outputModel){var nodeToParse=nodeMap[currentNodeId],nodeType=parserUtils.getNodeType(nodeToParse);if(!hasParser(nodeType))throw new TypeError("Node of type "+nodeType+" not supported");var toRepresentation=getParser(nodeType),parsed=toRepresentation(nodeToParse[nodeType],nodeMap,outputModel);return parsed.hasOwnProperty("nodeId")||(parsed.nodeId=nodeToParse[nodeType].nodeName),parsed},validateNodes=function(nodeMap){var errorTypes=[],nodes=[];for(var nodeId in nodeMap)nodeMap.hasOwnProperty(nodeId)&&nodes.push(nodeMap[nodeId]);if(null===nodes||0===nodes.length)throw new TypeError("Questionnaire Node list was empty or null.");for(var i=0;i<nodes.length;i++){var node=nodes[i],nodeType=parserUtils.getNodeType(node);hasParser(nodeType)||errorTypes.push(nodeType)}if(errorTypes.length>0){var error=new TypeError("The following Node types are not supported: "+errorTypes);throw error}},parser={parse:function(currentNodeId,nodeMap,outputModel){return parseNode(currentNodeId,nodeMap,outputModel)},validate:function(nodeMap){return validateNodes(nodeMap)}};return parser}])}(),function(){"use strict";var saturationDeviceNodeParser=angular.module("opentele-commons.questionnaireParser.saturationDeviceNodeParser",["opentele-commons.deviceListeners"]),saturationDeviceNodeParserService=["$templateCache","parserUtils","nativeService","saturationListener",function($templateCache,parserUtils,nativeService,saturationListener){var OMIT="Omit",NEXT="Next",SATURATION="saturation",generateRepresentation=function(node,nodeModel){var nodeTemplate=parserUtils.getNodeTemplate("saturationDeviceNode.html"),leftButton={text:OMIT,nextNodeId:node.nextFail},rightButton={text:NEXT,nextNodeId:node.next,validate:function(scope){var isValueEntered=function(){return void 0!==scope.nodeModel.saturation&&void 0!==scope.nodeModel.pulse};return isValueEntered()},clickAction:function(scope){var saturationName=node.saturation.name,saturationType=node.saturation.type,saturationValue=scope.nodeModel.saturation;scope.outputModel[saturationName]={name:saturationName,type:saturationType,value:saturationValue};var pulseName=node.pulse.name,pulseType=node.pulse.type,pulseValue=scope.nodeModel.pulse;scope.outputModel[pulseName]={name:pulseName,type:pulseType,value:pulseValue};var deviceName=node.deviceId.name,deviceType=node.deviceId.type,deviceId=scope.nodeModel.deviceId;scope.outputModel[deviceName]={name:deviceName,type:deviceType,value:deviceId}}},representation={nodeTemplate:nodeTemplate,nodeModel:nodeModel,leftButton:leftButton,rightButton:rightButton};return representation},parseNode=function(node,nodeMap,outputModel){var nodeModel={heading:node.text},eventListener=saturationListener.create(nodeModel,!1),nativeEventCallback=function(message){message.measurementType===SATURATION&&eventListener(message.event)};nativeService.subscribeToMultipleMessages("deviceMeasurementResponse",nativeEventCallback),nativeService.addDeviceListener(SATURATION);var representation=generateRepresentation(node,nodeModel);return representation};return parseNode}];saturationDeviceNodeParser.service("saturationDeviceNodeParser",saturationDeviceNodeParserService)}(),function(){"use strict";var saturationWithoutPulseDeviceNodeParser=angular.module("opentele-commons.questionnaireParser.saturationWithoutPulseDeviceNodeParser",["opentele-commons.deviceListeners"]),saturationWithoutPulseDeviceNodeParserService=["$templateCache","parserUtils","nativeService","saturationListener",function($templateCache,parserUtils,nativeService,saturationListener){var OMIT="Omit",NEXT="Next",SATURATION="saturation",generateRepresentation=function(node,nodeModel){var nodeTemplate=parserUtils.getNodeTemplate("saturationWithoutPulseDeviceNode.html"),leftButton={text:OMIT,nextNodeId:node.nextFail},rightButton={text:NEXT,nextNodeId:node.next,validate:function(scope){var isValueEntered=function(){return void 0!==scope.nodeModel.saturation};return isValueEntered()},clickAction:function(scope){var saturationName=node.saturation.name,saturationType=node.saturation.type,saturationValue=scope.nodeModel.saturation;scope.outputModel[saturationName]={name:saturationName,type:saturationType,value:saturationValue};var deviceName=node.deviceId.name,deviceType=node.deviceId.type,deviceId=scope.nodeModel.deviceId;scope.outputModel[deviceName]={name:deviceName,type:deviceType,value:deviceId}}},representation={nodeTemplate:nodeTemplate,nodeModel:nodeModel,leftButton:leftButton,rightButton:rightButton};return representation},parseNode=function(node,nodeMap,outputModel){var nodeModel={heading:node.text},eventListener=saturationListener.create(nodeModel,!0),nativeEventCallback=function(message){message.measurementType===SATURATION&&eventListener(message.event)};nativeService.subscribeToMultipleMessages("deviceMeasurementResponse",nativeEventCallback),nativeService.addDeviceListener(SATURATION);var representation=generateRepresentation(node,nodeModel);return representation};return parseNode}];saturationWithoutPulseDeviceNodeParser.service("saturationWithoutPulseDeviceNodeParser",saturationWithoutPulseDeviceNodeParserService)}(),function(){"use strict";var temperatureDeviceNodeParser=angular.module("opentele-commons.questionnaireParser.temperatureManualDeviceNodeParser",[]),temperatureService=["$templateCache","parserUtils",function($templateCache,parserUtils){var parseNode=function(node){var nodeModel={heading:node.text},leftButton={text:"Omit",nextNodeId:node.nextFail},rightButton={text:"Next",nextNodeId:node.next,validate:function(scope){return scope.temperatureForm.temperature.$valid},clickAction:function(scope){var nodeName=node.temperature.name;scope.outputModel[nodeName]={name:nodeName,type:node.temperature.type,value:scope.nodeModel.temperatureMeasurement}}},representation={nodeTemplate:parserUtils.getNodeTemplate("temperatureManualDeviceNode.html"),nodeModel:nodeModel,leftButton:leftButton,rightButton:rightButton};return representation};return parseNode}];temperatureDeviceNodeParser.service("temperatureManualDeviceNodeParser",temperatureService)}(),angular.module("opentele-commons.questionnaireParser.templates",["questionnaireParser/nodeTemplates/bloodPressureDeviceNode.html","questionnaireParser/nodeTemplates/bloodSugarManualDeviceNode.html","questionnaireParser/nodeTemplates/crpNode.html","questionnaireParser/nodeTemplates/delayNode.html","questionnaireParser/nodeTemplates/ioNodeEditText.html","questionnaireParser/nodeTemplates/ioNodeRadioButton.html","questionnaireParser/nodeTemplates/ioNodeText.html","questionnaireParser/nodeTemplates/lungMonitorDeviceNode.html","questionnaireParser/nodeTemplates/saturationDeviceNode.html","questionnaireParser/nodeTemplates/saturationWithoutPulseDeviceNode.html","questionnaireParser/nodeTemplates/simpleInputNode.html","questionnaireParser/nodeTemplates/temperatureManualDeviceNode.html","questionnaireParser/nodeTemplates/urineLevel.html","questionnaireParser/nodeTemplates/weightDeviceNode.html"]),angular.module("questionnaireParser/nodeTemplates/bloodPressureDeviceNode.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("questionnaireParser/nodeTemplates/bloodPressureDeviceNode.html",'<div class="center-div">\n    <h2 class="line-wrap">{{ nodeModel.heading | translate }}</h2>\n</div>\n<div id="deviceHook"></div>\n<div class="center-div">\n    <h4 class="line-wrap">{{ nodeModel.info | translate }}</h4>\n</div>\n<form name="bloodPressureForm" class="text-center">\n    <fieldset class="questionnaire-fields">\n        <div class="block">\n            <label for="blood-pressure-systolic">{{ "BLOOD_PRESSURE_SYSTOLIC" | translate }}</label>\n            <input id="blood-pressure-systolic"\n                   type="number"\n                   name="blood-pressure-systolic"\n                   ng-model="nodeModel.systolic"\n                   disabled />\n        </div>\n        <div class="block">\n            <label for="blood-pressure-diastolic">{{ "BLOOD_PRESSURE_DIASTOLIC" | translate }}</label>\n            <input id="blood-pressure-diastolic"\n                   type="number"\n                   name="blood-pressure-diastolic"\n                   ng-model="nodeModel.diastolic"\n                   disabled />\n        </div>\n        <div class="block">\n            <label for="blood-pressure-pulse">{{ "BLOOD_PRESSURE_PULSE" | translate }}</label>\n            <input id="blood-pressure-pulse"\n                   type="number"\n                   name="blood-pressure-pulse"\n                   ng-model="nodeModel.pulse"\n                   disabled />\n        </div>\n        <div class="block"\n             ng-show="nodeModel.error !== undefined">\n            <small class="error-message">{{ nodeModel.error | translate }}</small>\n        </div>\n    </fieldset>\n</form>\n')}]),angular.module("questionnaireParser/nodeTemplates/bloodSugarManualDeviceNode.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("questionnaireParser/nodeTemplates/bloodSugarManualDeviceNode.html",'<div class="center-div">\n    <h2 class="line-wrap">{{nodeModel.heading}}</h2>\n</div>\n<form name="bloodSugarForm" class="text-center">\n    <fieldset class="questionnaire-fields">\n        <div>\n            <label for="count">{{ "BLOOD_SUGAR" | translate }}</label>\n            <input id="count"\n                   type="number"\n                   min="0"\n                   max="999"\n                   name="count"\n                   autocomplete="off"\n                   ng-model="nodeModel.bloodSugarManualMeasurement" required />\n        </div>\n        <div ng-show="bloodSugarForm.count.$dirty && bloodSugarForm.count.$invalid">\n            <small class="error-message"\n                   ng-show="bloodSugarForm.count.$error.required">\n                {{ "BLOOD_SUGAR_COUNT_ERROR_MESSAGE" | translate }}\n            </small>\n        </div>\n        <div>\n            <label for="beforeMeal">{{ "BEFORE_MEAL" | translate }}</label>\n            <input id="beforeMeal"\n                   type="checkbox"\n                   ng-model="nodeModel.bloodSugarManualBeforeMeal"/>\n        </div>\n        <div>\n            <label for="afterMeal">{{ "AFTER_MEAL" | translate }}</label>\n            <input id="afterMeal"\n                   type="checkbox"\n                   ng-model="nodeModel.bloodSugarManualAfterMeal"/>\n        </div>\n    </fieldset>\n</form>\n')}]),angular.module("questionnaireParser/nodeTemplates/crpNode.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("questionnaireParser/nodeTemplates/crpNode.html",'<div class="center-div">\n    <h2 class="line-wrap">{{nodeModel.heading}}</h2>\n</div>\n<form name="crpForm" class="text-center">\n    <fieldset class="questionnaire-fields">\n\n        <div>\n            <label for="lt5">{{ "LT5" | translate }}</label>\n            <input id="lt5"\n                   name="lt5"\n                   type="checkbox"\n                   ng-model="nodeModel.crpLt5Measurement"/>\n        </div>\n        <div>\n            <label for="count">{{ "OR_CRP" | translate }}</label>\n            <input id="count"\n                   type="number"\n                   name="count"\n                   autocomplete="off"\n                   ng-model="nodeModel.crpCountMeasurement"/>\n        </div>\n\n    </fieldset>\n</form>\n')}]),angular.module("questionnaireParser/nodeTemplates/delayNode.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("questionnaireParser/nodeTemplates/delayNode.html",'<div class="center-div">\n	<h2 class="line-wrap">{{nodeModel.heading}}</h2>\n</div>\n<div timer="nodeModel.nodeId"></div>\n<div class="center-div">\n	<h2 class="line-wrap">{{nodeModel.timerDescription}}</h2>\n</div>\n')}]),angular.module("questionnaireParser/nodeTemplates/ioNodeEditText.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("questionnaireParser/nodeTemplates/ioNodeEditText.html",'<form name="#form_name#" class="text-center">\n	<fieldset class="questionnaire-fields">\n		<div class="block">\n			<label for="#input_name#">#label#</label>\n			<input id="#input_name#"\n                   type="#type#"\n                   step="#step#"\n                   name="#input_name#"\n                   autocomplete="off"\n                   ng-model="nodeModel.#input_name#" required />\n		</div>\n		<div class="block"\n             ng-show="#form_name#.#input_name#.$dirty && #form_name#.#input_name#.$invalid">\n			<small class="error-message"\n                   ng-show="#form_name#.#input_name#.$error.required">{{ "EDIT_TEXT_ELEMENT_ERROR_MESSAGE" | translate }}</small>\n		</div>\n	</fieldset>\n</form>\n');
}]),angular.module("questionnaireParser/nodeTemplates/ioNodeRadioButton.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("questionnaireParser/nodeTemplates/ioNodeRadioButton.html",'<form name="#form_name#" class="text-center">\n    <fieldset class="questionnaire-fields">\n        <div class="narrow-row"\n             ng-repeat="radioItem in nodeModel.radioItems">\n            <input id="radio-items"\n                   name="radio-items"\n                   type="radio"\n                   value="{{radioItem.value}}"\n                   ng-model="nodeModel.radioSelected">\n            <div class="radio-label" for="radio-items">\n              {{radioItem.label}}<br/>\n            </div>\n        </div>\n    </fieldset>\n</form>\n')}]),angular.module("questionnaireParser/nodeTemplates/ioNodeText.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("questionnaireParser/nodeTemplates/ioNodeText.html",'<div class="center-div">\n	<h2 class="line-wrap">#heading#</h2>\n</div>\n')}]),angular.module("questionnaireParser/nodeTemplates/lungMonitorDeviceNode.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("questionnaireParser/nodeTemplates/lungMonitorDeviceNode.html",'<div class="center-div">\n    <h2 class="line-wrap">{{ nodeModel.heading | translate }}</h2>\n</div>\n<div id="deviceHook"></div>\n<div class="center-div">\n    <h4 class="line-wrap">{{ nodeModel.info | translate }}</h4>\n</div>\n<form name="lungFunctionForm" class="text-center">\n    <fieldset class="questionnaire-fields">\n        <div class="block">\n            <label for="lung-function-fev1">{{ "LUNG_FUNCTION_FEV1" | translate }}</label>\n            <input id="lung-function-fev1"\n                   type="number"\n                   name="lung-function-fev1"\n                   ng-model="nodeModel.fev1"\n                   disabled />\n        </div>\n        <div class="block"\n             ng-show="nodeModel.error !== undefined">\n            <small class="error-message">{{ nodeModel.error | translate }}</small>\n        </div>\n    </fieldset>\n</form>\n')}]),angular.module("questionnaireParser/nodeTemplates/saturationDeviceNode.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("questionnaireParser/nodeTemplates/saturationDeviceNode.html",'<div class="center-div">\n	<h2 class="line-wrap">{{nodeModel.heading | translate }}</h2>\n</div>\n<div id="deviceHook"></div>\n<div class="center-div">\n	<h4 class="line-wrap">{{ nodeModel.info | translate }}</h4>\n</div>\n<form name="saturationForm" class="text-center">\n	<fieldset class="questionnaire-fields">\n		<div class="block">\n			<label for="saturation-saturation">{{ "SATURATION_SATURATION" | translate }}</label>\n			<input id="saturation-saturation"\n             type="number"\n             name="saturation-saturation"\n             ng-model="nodeModel.saturation"\n             disabled />\n		</div>\n		<div class="block">\n			<label for="saturation-pulse">{{ "SATURATION_PULSE" | translate }}</label>\n			<input id="saturation-pulse"\n             type="number"\n             name="saturation-pulse"\n             ng-model="nodeModel.pulse"\n             disabled />\n		</div>\n		<div class="block"\n             ng-show="nodeModel.error !== undefined">\n			<small class="error-message">{{ nodeModel.error | translate }}</small>\n		</div>\n	</fieldset>\n</form>\n')}]),angular.module("questionnaireParser/nodeTemplates/saturationWithoutPulseDeviceNode.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("questionnaireParser/nodeTemplates/saturationWithoutPulseDeviceNode.html",'<div class="center-div">\n	<h2 class="line-wrap">{{nodeModel.heading | translate }}</h2>\n</div>\n<div id="deviceHook"></div>\n<div class="center-div">\n	<h4 class="line-wrap">{{ nodeModel.info | translate }}</h4>\n</div>\n<form name="saturationForm" class="text-center">\n	<fieldset class="questionnaire-fields">\n		<div class="block">\n			<label for="saturation-saturation">{{ "SATURATION_SATURATION" | translate }}</label>\n			<input id="saturation-saturation"\n             type="number"\n             name="saturation-saturation"\n             ng-model="nodeModel.saturation"\n             disabled />\n		</div>\n		<div class="block"\n             ng-show="nodeModel.error !== undefined">\n			<small class="error-message">{{ nodeModel.error | translate }}</small>\n		</div>\n	</fieldset>\n</form>\n')}]),angular.module("questionnaireParser/nodeTemplates/simpleInputNode.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("questionnaireParser/nodeTemplates/simpleInputNode.html",'<div class="center-div">\n	<h2 class="line-wrap">{{nodeModel.heading}}</h2>\n</div>\n<form name="inputForm" class="text-center">\n	<fieldset class="questionnaire-fields">\n		<div>\n			<label for="value">{{ "#field_name#" | translate }}</label>\n			<input id="value"\n				type="number"\n				min="0"\n				max="999"\n				name="value"\n                autocomplete="off"\n				ng-model="nodeModel.measurement" required ng-pattern="#pattern#"/>\n		</div>\n		<div ng-show="inputForm.value.$dirty && inputForm.value.$invalid">\n			<small class="error-message"\n				ng-show="inputForm.value.$error.required">\n				{{ "#field_name#_ERROR_MESSAGE" | translate }}\n			</small>\n			<small class="error-message"\n				ng-show="inputForm.value.$error.pattern">\n				{{ "#field_name#_ERROR_MESSAGE" | translate }}\n			</small>\n		</div>\n	</fieldset>\n</form>\n')}]),angular.module("questionnaireParser/nodeTemplates/temperatureManualDeviceNode.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("questionnaireParser/nodeTemplates/temperatureManualDeviceNode.html",'<div class="center-div">\n    <h2 class="line-wrap">{{nodeModel.heading}}</h2>\n</div>\n<form name="temperatureForm" class="text-center">\n    <fieldset class="questionnaire-fields">\n        <div>\n            <label for="temperature">{{ "TEMPERATURE" | translate }}</label>\n            <input id="temperature"\n                   type="number"\n                   name="temperature"\n                   autocomplete="off"\n                   ng-model="nodeModel.temperatureMeasurement" required />\n        </div>\n        <div ng-show="temperatureForm.temperature.$dirty && temperatureForm.temperature.$invalid">\n            <small class="error-message"\n                   ng-show="temperatureForm.temperature.$error.required">\n                {{ "TEMPERATURE_ERROR_MESSAGE" | translate }}\n            </small>\n        </div>\n    </fieldset>\n</form>\n')}]),angular.module("questionnaireParser/nodeTemplates/urineLevel.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("questionnaireParser/nodeTemplates/urineLevel.html",'<div class="center-div">\n    <h2 class="line-wrap">{{nodeModel.heading}}</h2>\n</div>\n<form name="#form_name#" class="text-center">\n    <fieldset class="questionnaire-fields">\n        <div>\n            <ul>\n                <li class="narrow-row list-unstyled"\n                    ng-repeat="level in nodeModel.measurementSelections">\n                    <input id="radio-{{$index}}"\n                           name="radio-{{$index}}"\n                           type="radio"\n                           ng-model="nodeModel.measurement"\n                           value="{{$index}}">\n                    <div class="radio-label">\n                        {{ level | translate}}<br/>\n                    </div>\n                </li>\n            </ul>\n        </div>\n    </fieldset>\n</form>\n')}]),angular.module("questionnaireParser/nodeTemplates/weightDeviceNode.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("questionnaireParser/nodeTemplates/weightDeviceNode.html",'<div class="center-div">\n	<h2 class="line-wrap">{{nodeModel.heading | translate }}</h2>\n</div>\n<div id="deviceHook"></div>\n<div class="center-div">\n	<h4 class="line-wrap">{{ nodeModel.info | translate }}</h4>\n</div>\n<form name="weightForm" class="text-center">\n	<fieldset class="questionnaire-fields">\n		<div class="block">\n			<label for="weight-measurement">{{ "WEIGHT" | translate }}</label>\n			<input id="weight-measurement"\n             type="number"\n             name="weight-measurement"\n             ng-model="nodeModel.weight"\n             disabled />\n		</div>\n		<div class="block"\n             ng-show="nodeModel.error !== undefined">\n			<small class="error-message">{{ nodeModel.error | translate }}</small>\n		</div>\n	</fieldset>\n</form>\n')}]),function(){"use strict";var bloodUrineDeviceNodeParser=angular.module("opentele-commons.questionnaireParser.bloodUrineDeviceNodeParser",[]),service=["$templateCache","parserUtils",function($templateCache,parserUtils){var parseNode=function(node){var nodeModel={heading:node.text,measurementSelections:["URINE_LEVEL_NEGATIVE","URINE_LEVEL_PLUS_MINUS","URINE_LEVEL_PLUS_ONE","URINE_LEVEL_PLUS_TWO","URINE_LEVEL_PLUS_THREE"]},leftButton={text:"Omit",nextNodeId:node.nextFail},nodeName=node.bloodUrine.name,formName="inputForm_"+parserUtils.hashCode(nodeName),rightButton={text:"Next",nextNodeId:node.next,clickAction:function(scope){var radix=10;scope.outputModel[nodeName]={name:nodeName,type:node.bloodUrine.type,value:parseInt(scope.nodeModel.measurement,radix)}},validate:function(scope){return scope[formName].$dirty}},template=parserUtils.getNodeTemplate("urineLevel.html");template=parserUtils.replaceAll(template,"#form_name#",formName);var representation={nodeTemplate:template,nodeModel:nodeModel,leftButton:leftButton,rightButton:rightButton};return representation};return parseNode}];bloodUrineDeviceNodeParser.service("bloodUrineDeviceNodeParser",service)}(),function(){"use strict";var urineDeviceNodeParser=angular.module("opentele-commons.questionnaireParser.urineDeviceNodeParser",[]);urineDeviceNodeParser.service("urineDeviceNodeParser",["$templateCache","parserUtils",function($templateCache,parserUtils){var parseNode=function(node){var nodeModel={heading:node.text,measurementSelections:["URINE_LEVEL_NEGATIVE","URINE_LEVEL_PLUS_MINUS","URINE_LEVEL_PLUS_ONE","URINE_LEVEL_PLUS_TWO","URINE_LEVEL_PLUS_THREE","URINE_LEVEL_PLUS_FOUR"]},leftButton={text:"Omit",nextNodeId:node.nextFail},nodeName=node.urine.name,formName="inputForm_"+parserUtils.hashCode(nodeName),rightButton={text:"Next",nextNodeId:node.next,clickAction:function(scope){var radix=10;scope.outputModel[nodeName]={name:nodeName,type:node.urine.type,value:parseInt(scope.nodeModel.measurement,radix)}},validate:function(scope){return scope[formName].$dirty}},template=parserUtils.getNodeTemplate("urineLevel.html");template=parserUtils.replaceAll(template,"#form_name#",formName);var representation={nodeTemplate:template,nodeModel:nodeModel,leftButton:leftButton,rightButton:rightButton};return representation};return parseNode}])}(),function(){"use strict";var glucoseUrineDeviceNodeParser=angular.module("opentele-commons.questionnaireParser.glucoseUrineDeviceNodeParser",[]);glucoseUrineDeviceNodeParser.service("glucoseUrineDeviceNodeParser",["$templateCache","parserUtils",function($templateCache,parserUtils){var parseNode=function(node){var nodeModel={heading:node.text,measurementSelections:["URINE_LEVEL_NEGATIVE","URINE_LEVEL_PLUS_ONE","URINE_LEVEL_PLUS_TWO","URINE_LEVEL_PLUS_THREE","URINE_LEVEL_PLUS_FOUR"]},leftButton={text:"Omit",nextNodeId:node.nextFail},nodeName=node.glucoseUrine.name,formName="inputForm_"+parserUtils.hashCode(nodeName),rightButton={text:"Next",nextNodeId:node.next,clickAction:function(scope){var radix=10;scope.outputModel[nodeName]={name:nodeName,type:node.glucoseUrine.type,value:parseInt(scope.nodeModel.measurement,radix)}},validate:function(scope){return scope[formName].$dirty}},template=parserUtils.getNodeTemplate("urineLevel.html");template=parserUtils.replaceAll(template,"#form_name#",formName);var representation={nodeTemplate:template,nodeModel:nodeModel,leftButton:leftButton,rightButton:rightButton};return representation};return parseNode}])}(),function(){"use strict";var leukocytesUrineDeviceNodeParser=angular.module("opentele-commons.questionnaireParser.leukocytesUrineDeviceNodeParser",[]),service=["$templateCache","parserUtils",function($templateCache,parserUtils){var parseNode=function(node){var nodeModel={heading:node.text,measurementSelections:["URINE_LEVEL_NEGATIVE","URINE_LEVEL_PLUS_ONE","URINE_LEVEL_PLUS_TWO","URINE_LEVEL_PLUS_THREE"]},leftButton={text:"Omit",nextNodeId:node.nextFail},nodeName=node.leukocytesUrine.name,formName="inputForm_"+parserUtils.hashCode(nodeName),rightButton={text:"Next",nextNodeId:node.next,clickAction:function(scope){var radix=10;scope.outputModel[nodeName]={name:nodeName,type:node.leukocytesUrine.type,value:parseInt(scope.nodeModel.measurement,radix)}},validate:function(scope){return scope[formName].$dirty}},template=parserUtils.getNodeTemplate("urineLevel.html");template=parserUtils.replaceAll(template,"#form_name#",formName);var representation={nodeTemplate:template,nodeModel:nodeModel,leftButton:leftButton,rightButton:rightButton};return representation};return parseNode}];leukocytesUrineDeviceNodeParser.service("leukocytesUrineDeviceNodeParser",service)}(),function(){"use strict";var nitriteUrineDeviceNodeParser=angular.module("opentele-commons.questionnaireParser.nitriteUrineDeviceNodeParser",[]),service=["$templateCache","parserUtils",function($templateCache,parserUtils){var parseNode=function(node){var nodeModel={heading:node.text,measurementSelections:["URINE_LEVEL_NEGATIVE","URINE_LEVEL_POSITIVE"]},leftButton={text:"Omit",nextNodeId:node.nextFail},nodeName=node.nitriteUrine.name,formName="inputForm_"+parserUtils.hashCode(nodeName),rightButton={text:"Next",nextNodeId:node.next,clickAction:function(scope){var nodeName=node.nitriteUrine.name,radix=10;scope.outputModel[nodeName]={name:nodeName,type:node.nitriteUrine.type,value:parseInt(scope.nodeModel.measurement,radix)}},validate:function(scope){return scope[formName].$dirty}},template=parserUtils.getNodeTemplate("urineLevel.html");template=parserUtils.replaceAll(template,"#form_name#",formName);var representation={nodeTemplate:template,nodeModel:nodeModel,leftButton:leftButton,rightButton:rightButton};return representation};return parseNode}];nitriteUrineDeviceNodeParser.service("nitriteUrineDeviceNodeParser",service)}(),function(){"use strict";var weightDeviceNodeParser=angular.module("opentele-commons.questionnaireParser.weightDeviceNodeParser",["opentele-commons.deviceListeners"]),weightDeviceNodeParserService=["$templateCache","parserUtils","nativeService","weightListener",function($templateCache,parserUtils,nativeService,weightListener){var OMIT="Omit",NEXT="Next",WEIGHT="weight",generateRepresentation=function(node,nodeModel){var nodeTemplate=parserUtils.getNodeTemplate("weightDeviceNode.html"),leftButton={text:OMIT,nextNodeId:node.nextFail},rightButton={text:NEXT,nextNodeId:node.next,validate:function(scope){var isValueEntered=function(){return void 0!==scope.nodeModel.weight};return isValueEntered()},clickAction:function(scope){var weightName=node.weight.name,weightType=node.weight.type,weightValue=scope.nodeModel.weight;scope.outputModel[weightName]={name:weightName,type:weightType,value:weightValue};var deviceName=node.deviceId.name,deviceType=node.deviceId.type,deviceId=scope.nodeModel.deviceId;scope.outputModel[deviceName]={name:deviceName,type:deviceType,value:deviceId}}},representation={nodeTemplate:nodeTemplate,nodeModel:nodeModel,leftButton:leftButton,rightButton:rightButton};return representation},parseNode=function(node,nodeMap,outputModel){var nodeModel={heading:"WEIGHT",info:node.text},eventListener=weightListener.create(nodeModel),nativeEventCallback=function(message){message.measurementType===WEIGHT&&eventListener(message.event)};nativeService.subscribeToMultipleMessages("deviceMeasurementResponse",nativeEventCallback),nativeService.addDeviceListener(WEIGHT);var representation=generateRepresentation(node,nodeModel);return representation};return parseNode}];weightDeviceNodeParser.service("weightDeviceNodeParser",weightDeviceNodeParserService)}();
//# sourceMappingURL=questionnaireParser.min.js.map